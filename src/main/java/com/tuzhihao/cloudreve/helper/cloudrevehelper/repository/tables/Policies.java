/*
 * This file is generated by jOOQ.
 */
package com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.tables;


import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.DefaultSchema;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.Indexes;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.Keys;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.tables.records.PoliciesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Policies extends TableImpl<PoliciesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>policies</code>
     */
    public static final Policies POLICIES = new Policies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PoliciesRecord> getRecordType() {
        return PoliciesRecord.class;
    }

    /**
     * The column <code>policies.id</code>.
     */
    public final TableField<PoliciesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>policies.created_at</code>.
     */
    public final TableField<PoliciesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>policies.updated_at</code>.
     */
    public final TableField<PoliciesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>policies.deleted_at</code>.
     */
    public final TableField<PoliciesRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>policies.name</code>.
     */
    public final TableField<PoliciesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>policies.type</code>.
     */
    public final TableField<PoliciesRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>policies.server</code>.
     */
    public final TableField<PoliciesRecord, String> SERVER = createField(DSL.name("server"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>policies.bucket_name</code>.
     */
    public final TableField<PoliciesRecord, String> BUCKET_NAME = createField(DSL.name("bucket_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<PoliciesRecord, Object> IS_PRIVATE = createField(DSL.name("is_private"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"bool\""), this, "");

    /**
     * The column <code>policies.base_url</code>.
     */
    public final TableField<PoliciesRecord, String> BASE_URL = createField(DSL.name("base_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>policies.access_key</code>.
     */
    public final TableField<PoliciesRecord, String> ACCESS_KEY = createField(DSL.name("access_key"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>policies.secret_key</code>.
     */
    public final TableField<PoliciesRecord, String> SECRET_KEY = createField(DSL.name("secret_key"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>policies.max_size</code>.
     */
    public final TableField<PoliciesRecord, Long> MAX_SIZE = createField(DSL.name("max_size"), SQLDataType.BIGINT, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<PoliciesRecord, Object> AUTO_RENAME = createField(DSL.name("auto_rename"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"bool\""), this, "");

    /**
     * The column <code>policies.dir_name_rule</code>.
     */
    public final TableField<PoliciesRecord, String> DIR_NAME_RULE = createField(DSL.name("dir_name_rule"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>policies.file_name_rule</code>.
     */
    public final TableField<PoliciesRecord, String> FILE_NAME_RULE = createField(DSL.name("file_name_rule"), SQLDataType.VARCHAR(255), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<PoliciesRecord, Object> IS_ORIGIN_LINK_ENABLE = createField(DSL.name("is_origin_link_enable"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"bool\""), this, "");

    /**
     * The column <code>policies.options</code>.
     */
    public final TableField<PoliciesRecord, String> OPTIONS = createField(DSL.name("options"), SQLDataType.CLOB, this, "");

    private Policies(Name alias, Table<PoliciesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Policies(Name alias, Table<PoliciesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>policies</code> table reference
     */
    public Policies(String alias) {
        this(DSL.name(alias), POLICIES);
    }

    /**
     * Create an aliased <code>policies</code> table reference
     */
    public Policies(Name alias) {
        this(alias, POLICIES);
    }

    /**
     * Create a <code>policies</code> table reference
     */
    public Policies() {
        this(DSL.name("policies"), null);
    }

    public <O extends Record> Policies(Table<O> child, ForeignKey<O, PoliciesRecord> key) {
        super(child, key, POLICIES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_POLICIES_DELETED_AT);
    }

    @Override
    public Identity<PoliciesRecord, Integer> getIdentity() {
        return (Identity<PoliciesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PoliciesRecord> getPrimaryKey() {
        return Keys.PK_POLICIES;
    }

    @Override
    public List<UniqueKey<PoliciesRecord>> getKeys() {
        return Arrays.<UniqueKey<PoliciesRecord>>asList(Keys.PK_POLICIES);
    }

    @Override
    public Policies as(String alias) {
        return new Policies(DSL.name(alias), this);
    }

    @Override
    public Policies as(Name alias) {
        return new Policies(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Policies rename(String name) {
        return new Policies(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Policies rename(Name name) {
        return new Policies(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Integer, LocalDateTime, LocalDateTime, LocalDateTime, String, String, String, String, Object, String, String, String, Long, Object, String, String, Object, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
