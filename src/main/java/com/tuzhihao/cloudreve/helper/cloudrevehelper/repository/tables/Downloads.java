/*
 * This file is generated by jOOQ.
 */
package com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.tables;


import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.DefaultSchema;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.Indexes;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.Keys;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.tables.records.DownloadsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Downloads extends TableImpl<DownloadsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>downloads</code>
     */
    public static final Downloads DOWNLOADS = new Downloads();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DownloadsRecord> getRecordType() {
        return DownloadsRecord.class;
    }

    /**
     * The column <code>downloads.id</code>.
     */
    public final TableField<DownloadsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>downloads.created_at</code>.
     */
    public final TableField<DownloadsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>downloads.updated_at</code>.
     */
    public final TableField<DownloadsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>downloads.deleted_at</code>.
     */
    public final TableField<DownloadsRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>downloads.status</code>.
     */
    public final TableField<DownloadsRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>downloads.type</code>.
     */
    public final TableField<DownloadsRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>downloads.source</code>.
     */
    public final TableField<DownloadsRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>downloads.total_size</code>.
     */
    public final TableField<DownloadsRecord, Long> TOTAL_SIZE = createField(DSL.name("total_size"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>downloads.downloaded_size</code>.
     */
    public final TableField<DownloadsRecord, Long> DOWNLOADED_SIZE = createField(DSL.name("downloaded_size"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>downloads.g_id</code>.
     */
    public final TableField<DownloadsRecord, String> G_ID = createField(DSL.name("g_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>downloads.speed</code>.
     */
    public final TableField<DownloadsRecord, Integer> SPEED = createField(DSL.name("speed"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>downloads.parent</code>.
     */
    public final TableField<DownloadsRecord, String> PARENT = createField(DSL.name("parent"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>downloads.attrs</code>.
     */
    public final TableField<DownloadsRecord, String> ATTRS = createField(DSL.name("attrs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>downloads.error</code>.
     */
    public final TableField<DownloadsRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>downloads.dst</code>.
     */
    public final TableField<DownloadsRecord, String> DST = createField(DSL.name("dst"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>downloads.user_id</code>.
     */
    public final TableField<DownloadsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>downloads.task_id</code>.
     */
    public final TableField<DownloadsRecord, Integer> TASK_ID = createField(DSL.name("task_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>downloads.node_id</code>.
     */
    public final TableField<DownloadsRecord, Integer> NODE_ID = createField(DSL.name("node_id"), SQLDataType.INTEGER, this, "");

    private Downloads(Name alias, Table<DownloadsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Downloads(Name alias, Table<DownloadsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>downloads</code> table reference
     */
    public Downloads(String alias) {
        this(DSL.name(alias), DOWNLOADS);
    }

    /**
     * Create an aliased <code>downloads</code> table reference
     */
    public Downloads(Name alias) {
        this(alias, DOWNLOADS);
    }

    /**
     * Create a <code>downloads</code> table reference
     */
    public Downloads() {
        this(DSL.name("downloads"), null);
    }

    public <O extends Record> Downloads(Table<O> child, ForeignKey<O, DownloadsRecord> key) {
        super(child, key, DOWNLOADS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_DOWNLOADS_DELETED_AT);
    }

    @Override
    public Identity<DownloadsRecord, Integer> getIdentity() {
        return (Identity<DownloadsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DownloadsRecord> getPrimaryKey() {
        return Keys.PK_DOWNLOADS;
    }

    @Override
    public List<UniqueKey<DownloadsRecord>> getKeys() {
        return Arrays.<UniqueKey<DownloadsRecord>>asList(Keys.PK_DOWNLOADS);
    }

    @Override
    public Downloads as(String alias) {
        return new Downloads(DSL.name(alias), this);
    }

    @Override
    public Downloads as(Name alias) {
        return new Downloads(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Downloads rename(String name) {
        return new Downloads(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Downloads rename(Name name) {
        return new Downloads(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<Integer, LocalDateTime, LocalDateTime, LocalDateTime, Integer, Integer, String, Long, Long, String, Integer, String, String, String, String, Integer, Integer, Integer> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
