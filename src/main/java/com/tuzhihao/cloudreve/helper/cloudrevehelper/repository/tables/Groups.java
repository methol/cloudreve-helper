/*
 * This file is generated by jOOQ.
 */
package com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.tables;


import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.DefaultSchema;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.Indexes;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.Keys;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.tables.records.GroupsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Groups extends TableImpl<GroupsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>groups</code>
     */
    public static final Groups GROUPS = new Groups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupsRecord> getRecordType() {
        return GroupsRecord.class;
    }

    /**
     * The column <code>groups.id</code>.
     */
    public final TableField<GroupsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>groups.created_at</code>.
     */
    public final TableField<GroupsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>groups.updated_at</code>.
     */
    public final TableField<GroupsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>groups.deleted_at</code>.
     */
    public final TableField<GroupsRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>groups.name</code>.
     */
    public final TableField<GroupsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>groups.policies</code>.
     */
    public final TableField<GroupsRecord, String> POLICIES = createField(DSL.name("policies"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>groups.max_storage</code>.
     */
    public final TableField<GroupsRecord, Long> MAX_STORAGE = createField(DSL.name("max_storage"), SQLDataType.BIGINT, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<GroupsRecord, Object> SHARE_ENABLED = createField(DSL.name("share_enabled"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"bool\""), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<GroupsRecord, Object> WEB_DAV_ENABLED = createField(DSL.name("web_dav_enabled"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"bool\""), this, "");

    /**
     * The column <code>groups.speed_limit</code>.
     */
    public final TableField<GroupsRecord, Integer> SPEED_LIMIT = createField(DSL.name("speed_limit"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>groups.options</code>.
     */
    public final TableField<GroupsRecord, String> OPTIONS = createField(DSL.name("options"), SQLDataType.VARCHAR(255), this, "");

    private Groups(Name alias, Table<GroupsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Groups(Name alias, Table<GroupsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>groups</code> table reference
     */
    public Groups(String alias) {
        this(DSL.name(alias), GROUPS);
    }

    /**
     * Create an aliased <code>groups</code> table reference
     */
    public Groups(Name alias) {
        this(alias, GROUPS);
    }

    /**
     * Create a <code>groups</code> table reference
     */
    public Groups() {
        this(DSL.name("groups"), null);
    }

    public <O extends Record> Groups(Table<O> child, ForeignKey<O, GroupsRecord> key) {
        super(child, key, GROUPS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_GROUPS_DELETED_AT);
    }

    @Override
    public Identity<GroupsRecord, Integer> getIdentity() {
        return (Identity<GroupsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GroupsRecord> getPrimaryKey() {
        return Keys.PK_GROUPS;
    }

    @Override
    public List<UniqueKey<GroupsRecord>> getKeys() {
        return Arrays.<UniqueKey<GroupsRecord>>asList(Keys.PK_GROUPS);
    }

    @Override
    public Groups as(String alias) {
        return new Groups(DSL.name(alias), this);
    }

    @Override
    public Groups as(Name alias) {
        return new Groups(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Groups rename(String name) {
        return new Groups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Groups rename(Name name) {
        return new Groups(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, LocalDateTime, LocalDateTime, LocalDateTime, String, String, Long, Object, Object, Integer, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
