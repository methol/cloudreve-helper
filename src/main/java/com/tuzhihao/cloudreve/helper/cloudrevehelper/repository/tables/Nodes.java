/*
 * This file is generated by jOOQ.
 */
package com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.tables;


import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.DefaultSchema;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.Indexes;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.Keys;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.tables.records.NodesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Nodes extends TableImpl<NodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>nodes</code>
     */
    public static final Nodes NODES = new Nodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NodesRecord> getRecordType() {
        return NodesRecord.class;
    }

    /**
     * The column <code>nodes.id</code>.
     */
    public final TableField<NodesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>nodes.created_at</code>.
     */
    public final TableField<NodesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>nodes.updated_at</code>.
     */
    public final TableField<NodesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>nodes.deleted_at</code>.
     */
    public final TableField<NodesRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>nodes.status</code>.
     */
    public final TableField<NodesRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>nodes.name</code>.
     */
    public final TableField<NodesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>nodes.type</code>.
     */
    public final TableField<NodesRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>nodes.server</code>.
     */
    public final TableField<NodesRecord, String> SERVER = createField(DSL.name("server"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>nodes.slave_key</code>.
     */
    public final TableField<NodesRecord, String> SLAVE_KEY = createField(DSL.name("slave_key"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>nodes.master_key</code>.
     */
    public final TableField<NodesRecord, String> MASTER_KEY = createField(DSL.name("master_key"), SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<NodesRecord, Object> ARIA2_ENABLED = createField(DSL.name("aria2_enabled"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"bool\""), this, "");

    /**
     * The column <code>nodes.aria2_options</code>.
     */
    public final TableField<NodesRecord, String> ARIA2_OPTIONS = createField(DSL.name("aria2_options"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>nodes.rank</code>.
     */
    public final TableField<NodesRecord, Integer> RANK = createField(DSL.name("rank"), SQLDataType.INTEGER, this, "");

    private Nodes(Name alias, Table<NodesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Nodes(Name alias, Table<NodesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>nodes</code> table reference
     */
    public Nodes(String alias) {
        this(DSL.name(alias), NODES);
    }

    /**
     * Create an aliased <code>nodes</code> table reference
     */
    public Nodes(Name alias) {
        this(alias, NODES);
    }

    /**
     * Create a <code>nodes</code> table reference
     */
    public Nodes() {
        this(DSL.name("nodes"), null);
    }

    public <O extends Record> Nodes(Table<O> child, ForeignKey<O, NodesRecord> key) {
        super(child, key, NODES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_NODES_DELETED_AT);
    }

    @Override
    public Identity<NodesRecord, Integer> getIdentity() {
        return (Identity<NodesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NodesRecord> getPrimaryKey() {
        return Keys.PK_NODES;
    }

    @Override
    public List<UniqueKey<NodesRecord>> getKeys() {
        return Arrays.<UniqueKey<NodesRecord>>asList(Keys.PK_NODES);
    }

    @Override
    public Nodes as(String alias) {
        return new Nodes(DSL.name(alias), this);
    }

    @Override
    public Nodes as(Name alias) {
        return new Nodes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Nodes rename(String name) {
        return new Nodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nodes rename(Name name) {
        return new Nodes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, LocalDateTime, LocalDateTime, LocalDateTime, Integer, String, Integer, String, String, String, Object, String, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
