/*
 * This file is generated by jOOQ.
 */
package com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.tables;


import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.DefaultSchema;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.Indexes;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.Keys;
import com.tuzhihao.cloudreve.helper.cloudrevehelper.repository.tables.records.SharesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Shares extends TableImpl<SharesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shares</code>
     */
    public static final Shares SHARES = new Shares();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SharesRecord> getRecordType() {
        return SharesRecord.class;
    }

    /**
     * The column <code>shares.id</code>.
     */
    public final TableField<SharesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>shares.created_at</code>.
     */
    public final TableField<SharesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>shares.updated_at</code>.
     */
    public final TableField<SharesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>shares.deleted_at</code>.
     */
    public final TableField<SharesRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>shares.password</code>.
     */
    public final TableField<SharesRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<SharesRecord, Object> IS_DIR = createField(DSL.name("is_dir"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"bool\""), this, "");

    /**
     * The column <code>shares.user_id</code>.
     */
    public final TableField<SharesRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>shares.source_id</code>.
     */
    public final TableField<SharesRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>shares.views</code>.
     */
    public final TableField<SharesRecord, Integer> VIEWS = createField(DSL.name("views"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>shares.downloads</code>.
     */
    public final TableField<SharesRecord, Integer> DOWNLOADS = createField(DSL.name("downloads"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>shares.remain_downloads</code>.
     */
    public final TableField<SharesRecord, Integer> REMAIN_DOWNLOADS = createField(DSL.name("remain_downloads"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>shares.expires</code>.
     */
    public final TableField<SharesRecord, LocalDateTime> EXPIRES = createField(DSL.name("expires"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<SharesRecord, Object> PREVIEW_ENABLED = createField(DSL.name("preview_enabled"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"bool\""), this, "");

    /**
     * The column <code>shares.source_name</code>.
     */
    public final TableField<SharesRecord, String> SOURCE_NAME = createField(DSL.name("source_name"), SQLDataType.VARCHAR(255), this, "");

    private Shares(Name alias, Table<SharesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Shares(Name alias, Table<SharesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shares</code> table reference
     */
    public Shares(String alias) {
        this(DSL.name(alias), SHARES);
    }

    /**
     * Create an aliased <code>shares</code> table reference
     */
    public Shares(Name alias) {
        this(alias, SHARES);
    }

    /**
     * Create a <code>shares</code> table reference
     */
    public Shares() {
        this(DSL.name("shares"), null);
    }

    public <O extends Record> Shares(Table<O> child, ForeignKey<O, SharesRecord> key) {
        super(child, key, SHARES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_SHARES_DELETED_AT, Indexes.SOURCE);
    }

    @Override
    public Identity<SharesRecord, Integer> getIdentity() {
        return (Identity<SharesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SharesRecord> getPrimaryKey() {
        return Keys.PK_SHARES;
    }

    @Override
    public List<UniqueKey<SharesRecord>> getKeys() {
        return Arrays.<UniqueKey<SharesRecord>>asList(Keys.PK_SHARES);
    }

    @Override
    public Shares as(String alias) {
        return new Shares(DSL.name(alias), this);
    }

    @Override
    public Shares as(Name alias) {
        return new Shares(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shares rename(String name) {
        return new Shares(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shares rename(Name name) {
        return new Shares(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, LocalDateTime, LocalDateTime, LocalDateTime, String, Object, Integer, Integer, Integer, Integer, Integer, LocalDateTime, Object, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
